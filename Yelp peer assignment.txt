Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
	SELECT count(*) FROM attribute
ii. Business table = 10000
	SELECT count(*) FROM business
iii. Category table = 10000
	SELECT count(*) FROM category
iv. Checkin table = 10000
	SELECT count(*) FROM checkin
v. elite_years table = 10000
	SELECT count(*) FROM elite_years
vi. friend table = 10000
	SELECT count(*) FROM friend
vii. hours table = 10000
	SELECT count(*) FROM hours
viii. photo table = 10000
	SELECT count(*) FROM photo
ix. review table = 10000
	SELECT count(*) FROM review
x. tip table = 10000
	SELECT count(*) FROM tip
xi. user table = 10000
	SELECT count(*) FROM user
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 distinct records. Calculate by primary key id
ii. Hours = 1562 distinct records. Calculated by foreign key business_id
iii. Category = 2643 distinct records. Calculated by foreign key business_id
iv. Attribute = 1115 distinct records. Calculated by foreign key business_id
v. Review = 10000 distinct records. Calculated by primary key id
vi. Checkin = 493 distinct records. Calculated by foreign key business_id
vii. Photo = 10000 distinct records. Calculated by primary key id
viii. Tip = 537 distinct records. Calculated by foreign key user_id
ix. User = 10000 distinct records. Calculated by primary key id
x. Friend = 11 distinct records. Calculated by foreign key user_id
xi. Elite_years = 2780 distinct records. Calculated by foreign key user_id

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
SELECT 
  * 
FROM 
  user 
WHERE 
  name is null 
  or review_count is null 
  or yelping_since is null 
  or useful is null 
  or funny is null 
  or cool is null 
  or fans is null 
  or average_stars is null 
  or compliment_hot is null 
  or compliment_more is null 
  or compliment_profile is null 
  or compliment_cute is null 
  or compliment_list is null 
  or compliment_note is null 
  or compliment_plain is null 
  or compliment_cool is null 
  or compliment_funny is null 
  or compliment_writer is null 
  or compliment_photos is null;
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		SELECT min(stars), max(stars), avg(stars) FROM review	
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5 		avg: 3.6549
		SELECT min(stars), max(stars), avg(stars) FROM business
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		SELECT min(likes), max(likes), avg(likes) FROM tip
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		SELECT min(count), max(count), avg(count) FROM checkin
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995 
		SELECT min(review_count), max(review_count), avg(review_count) FROM user


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
SELECT 
  city, 
  SUM(review_count) 
FROM 
  business 
GROUP BY 
  city 
ORDER BY 
  SUM(review_count) DESC
	
	
	Copy and Paste the Result Below:
+-----------------+-------------------+
| city            | SUM(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT 
  stars, 
  count(stars) 
FROM 
  business 
WHERE 
  city = 'Avon' 
Group BY 
  stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+--------------+
| stars | count(stars) |
+-------+--------------+
|   1.5 |            1 |
|   2.5 |            2 |
|   3.5 |            3 |
|   4.0 |            2 |
|   4.5 |            1 |
|   5.0 |            1 |
+-------+--------------+

ii. Beachwood

SQL code used to arrive at answer:
SELECT 
  stars, 
  count(stars) 
FROM 
  business 
WHERE 
  city = 'Beachwood' 
Group BY 
  stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+--------------+
| stars | count(stars) |
+-------+--------------+
|   2.0 |            1 |
|   2.5 |            1 |
|   3.0 |            2 |
|   3.5 |            2 |
|   4.0 |            1 |
|   4.5 |            2 |
|   5.0 |            5 |
+-------+--------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
SELECT 
  name, 
  review_count 
FROM 
  user 
ORDER BY 
  review_count DESC 
LIMIT 
  3;
		
	Copy and Paste the Result Below:
		
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
There doesn't seem to be strong correlation between number of reviews and fans because the maximum number of fans is not for the maximum number of reviews posted.
There is a lot of flucation in data so it does necessarily mean that having more reviews will have most fans. But overall a slight positive correlation can be identified
as with the increase in the number of fans with the increase in the reviews. So the data may be widely spread like a circle instead on it being on the straight line. 
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Yes, there are more reviews with word love compared to hate.
+----------+------+
| category | freq |
+----------+------+
|     None |    0 |
| Hatefreq |  178 |
| Lovefreq | 1780 |
+----------+------+
	
	SQL code used to arrive at answer:
SELECT 
  category, 
  count(category) as freq 
FROM 
  (
    SELECT 
      CASE WHEN LOWER(r.text) LIKE '%love%' THEN 'Lovefreq' WHEN LOWER(r.text) LIKE '%hate%' THEN 'Hatefreq' END as category 
    FROM 
      review r
  ) 
GROUP BY 
  category;
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
SELECT 
  name, 
  fans 
FROM 
  user 
ORDER BY 
  fans DESC 
LIMIT 
  10;	
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+

	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
Yes the business in 4-5 star rating have less average working hours per week per company compared to business in 2-3 stars. So there might be other factors which are contributing to the difference in rating.

Result Obtained:
+-------+--------------------+--------------------------+-----------------------------------+
| Stars | Distinct companies | Total_work_hrs(per_week) | Avg working hrs(per company/week) |
+-------+--------------------+--------------------------+-----------------------------------+
| 2-3   |                  1 |                       98 |                                98 |
| 4-5   |                  2 |                    104.5 |                             52.25 |
+-------+--------------------+--------------------------+-----------------------------------+

SQL code:
SELECT 
  Stars, 
  count(DISTINCT company) as 'Distinct companies', 
  SUM(working_time) as 'Total_work_hrs(per_week)', 
  SUM(working_time)/ count(DISTINCT company) as 'Avg working hrs(per company/week)' 
FROM 
  (
    SELECT 
      CASE WHEN h.hours LIKE '%10:00-16:00' THEN 6 WHEN h.hours LIKE '%8:00-16:30' THEN 8.5 WHEN h.hours LIKE '%8:00-17:00' THEN 9 WHEN h.hours LIKE '%8:00-22:00' THEN 14 WHEN h.hours LIKE '%10:00-19:00' THEN 9 WHEN h.hours LIKE '%8:00-16:30' THEN 8.5 END AS working_time, 
      CASE WHEN b.stars BETWEEN 2 
      and 3 THEN '2-3' WHEN b.stars BETWEEN 4 
      and 5 THEN '4-5' ELSE '<2' END as Stars, 
      b.id as company 
    FROM 
      (
        (
          business b 
          JOIN hours h on b.id = h.business_id
        ) 
        JOIN category c on b.id = c.business_id
      ) 
    WHERE 
      b.city = 'Las Vegas' 
      and c.category = 'Shopping'
  ) 
WHERE 
  Stars != '<2' 
GROUP BY 
  Stars


ii. Do the two groups you chose to analyze have a different number of reviews?
Yes, the two groups have different number of reviews. On average business with 4-5 stars have more reviews. But comparing the exact reviews per business there are few business in 4-5 stars which have less number of reviews compared to 2-3 stars business.

Result Obtained:
+-----------+-------------------+------------------+--------------------+------------------+
| Stars     | Distinct business | Distinct reviews | review_count_total | review_count_avg |
+-----------+-------------------+------------------+--------------------+------------------+
| 2-3 stars |                 1 | 6                |                  6 |                6 |
| 4-5 stars |                 2 | 32,4             |                 36 |               18 |
+-----------+-------------------+------------------+--------------------+------------------+

SQL Code:
SELECT 
  * 
FROM 
  (
    SELECT 
      CASE WHEN b.stars BETWEEN 4 
      and 5 THEN '4-5 stars' WHEN b.stars BETWEEN 2 
      and 3 THEN '2-3 stars' ELSE '< 2' END AS 'Stars', 
      COUNT(DISTINCT b.id) AS 'Distinct business', 
      GROUP_CONCAT(DISTINCT b.review_count) as 'Distinct reviews', 
      SUM(b.review_count) AS review_count_total, 
      SUM(b.review_count)/ COUNT(DISTINCT b.id) AS review_count_avg 
    FROM 
      business b 
      INNER JOIN category c ON b.id = c.business_id 
    WHERE 
      b.city = 'Las Vegas' 
      AND c.category = 'Shopping' 
    GROUP BY 
      Stars
  ) 
WHERE 
  Stars != '< 2'

         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
There isn't any good inference as there are only few data points and all of them are located in different areas.


Result Obtained:
+-----------+--------------+--------------------------------------------+-------------+
| Stars     | neighborhood | address                                    | postal_code |
+-----------+--------------+--------------------------------------------+-------------+
| 2-3 stars | Eastside     | 3808 E Tropicana Ave                       | 89121       |
| 4-5 stars | None         | 1000 Scenic Loop Dr,3555 W Reno Ave, Ste F | 89161,89118 |
+-----------+--------------+--------------------------------------------+-------------+

SQL code:
SELECT 
  * 
FROM 
  (
    SELECT 
      CASE WHEN b.stars BETWEEN 4 
      and 5 THEN '4-5 stars' WHEN b.stars BETWEEN 2 
      and 3 THEN '2-3 stars' ELSE '< 2' END AS 'Stars',
      GROUP_CONCAT(DISTINCT b.neighborhood) AS 'neighborhood',
      GROUP_CONCAT(DISTINCT b.address) AS 'address',
      GROUP_CONCAT(DISTINCT b.postal_code) AS 'postal_code' 
    FROM 
      business b 
      INNER JOIN category c ON b.id = c.business_id 
    WHERE 
      b.city = 'Las Vegas' 
      AND c.category = 'Shopping' 
    GROUP BY 
      Stars
  ) 
WHERE 
  Stars != '< 2'

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: There are more companies open than closed.
         
         
ii. Difference 2: The average rating is slightly higher for open than closed. Further, the average number of reviews are comparably higher for open ones than closed ones.
         
         
         
SQL code used for analysis:
SELECT 
  b.is_open, 
  count(Distinct b.id) as 'Distinct companies', 
  AVG(b.stars) as 'Avg Rating/company', 
  AVG(b.review_count) as 'Avg review_count/company', 
  count(r.useful) as useful, 
  count(r.funny) as funny, 
  count(r.cool) as cool 
FROM 
  business b 
  JOIN review r on b.id = r.business_id 
GROUP BY 
  is_open;

Result Obtained
+---------+--------------------+--------------------+--------------------------+--------+-------+------+
| is_open | Distinct companies | Avg Rating/company | Avg review_count/company | useful | funny | cool |
+---------+--------------------+--------------------+--------------------------+--------+-------+------+
|       0 |                 61 |      3.54225352113 |            129.816901408 |     71 |    71 |   71 |
|       1 |                446 |       3.7610619469 |            311.187610619 |    565 |   565 |  565 |
+---------+--------------------+--------------------+--------------------------+--------+-------+------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment ana lysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
Predicting the number of fans user will have
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
For predicting the number of fans for user all the features which might be useful for building the ML model are presented in the table. The target variable is the fans column which is the last column in the table. As id are unique for each data point it can be dropped during the analysis.
The column yelping_since has been converted to the total years yelping as machine learning models cannot interpret the date directly. It has been converted by subracting the present date from the date in the yelping_since column.
Further, checking for other features to add to the final dataset to better imporve the model prediction, year from elite_years table was good. But after performing the necessary operations like finding the total number of years a user had elite_years only a handful of user_ids were in common to both tables. So this will cause a problem for model due to many null values in the column, so that column was dropped.                           
All the information form other table are non-related or had similar information to columns already selected.
Analysis and predictions of this datasetcan give deeper insights into what factors are majorly contributing for number of fans. Also this information can be passsed on to the reviwers so that they can imporve their fans.
                 
iii. Output of your finished dataset:

+------------------------+--------------+---------------+---------------------------------------+--------+--------+--------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+------+
| id                     | review_count | average_stars | Total years yelping(till present day) | useful |  funny |   cool | compliment_hot | compliment_more | compliment_profile | compliment_cute | compliment_list | compliment_note | compliment_plain | compliment_cool | compliment_funny | compliment_writer | compliment_photos | fans |
+------------------------+--------------+---------------+---------------------------------------+--------+--------+--------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+------+
| ---1lKK3aKOuomHnwAkAow |          245 |          3.97 |                                    15 |     67 |     22 |      9 |              2 |               3 |                  2 |               1 |               0 |               5 |                9 |               9 |                9 |                 9 |                 0 |   15 |
| ---94vtJ_5o_nikEs6hUjg |            2 |           5.0 |                                     6 |      0 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| ---cu1hq55BP9DWVXXKHZg |           57 |          3.79 |                                    13 |     34 |     14 |      0 |              0 |               0 |                  0 |               0 |               0 |               3 |                2 |               0 |                0 |                 0 |                 0 |    0 |
| ---fhiwiwBYrvqhpXgcWDQ |            8 |          2.78 |                                    11 |      2 |      3 |      1 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| ---PLwSf5gKdIoVnyRHgBA |            2 |           4.0 |                                     7 |      1 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| ---udAKDsn0yQXmzbWQNSw |           43 |          3.84 |                                     8 |      1 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    1 |
| --0kuuLmuYBe3Rmu0Iycww |           26 |          3.48 |                                    12 |     10 |      2 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    2 |
| --0RtXvcOIE4XbErYca6Rw |            2 |           4.5 |                                     9 |      0 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --0sXNBv6IizZXuV-nl0Aw |            1 |           5.0 |                                     9 |      0 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --0WZ5gklOfbUIodJuKfaQ |            7 |          4.11 |                                     9 |      0 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --104qdWvE99vaoIsj9ZJQ |            3 |          2.33 |                                     6 |      0 |      0 |      2 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --1av6NdbEbMiuBr7Aup9A |            9 |          4.33 |                                    12 |      0 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --1mPJZdSY9KluaBYAGboQ |            5 |           5.0 |                                    11 |      0 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --26jc8nCJBy4-7r3ZtmiQ |            2 |           5.0 |                                     8 |     15 |     13 |      9 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --2bpE5vyR-2hAP7sZZ4lA |           23 |          4.17 |                                     7 |      0 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --2HUmLkcNHZp0xw6AMBPg |           28 |           4.6 |                                     6 |      7 |      1 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --2vR0DIsmQ6WfcSzKWigw |         1153 |           4.4 |                                    10 | 122921 | 122419 | 122890 |           7246 |            2204 |               2367 |            1176 |             990 |            3239 |            12102 |           12008 |            12008 |              5772 |             22219 |  311 |
| --3B8LdT1NCD-bPkwS5-5g |            4 |          4.25 |                                     6 |      0 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --3l8wysfp49Z2TLnyT0vg |          111 |          3.43 |                                     9 |     97 |     57 |     32 |              0 |               0 |                  0 |               0 |               0 |               0 |                1 |               2 |                2 |                 3 |                 0 |    2 |
| --3oMd6gjXpAzhjLBrsVCQ |            2 |           4.0 |                                    12 |      1 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --3WaS23LcIXtxyFULJHTA |          213 |          3.93 |                                    12 |     63 |      6 |      2 |             11 |               4 |                  0 |               0 |               0 |               5 |               20 |              18 |               18 |                 7 |                 2 |   10 |
| --41c9Tl0C9OGewIR7Qyzg |          239 |          3.86 |                                    11 |     64 |     15 |      3 |             13 |               3 |                  2 |               1 |               1 |               5 |               12 |              17 |               17 |                11 |                 3 |   23 |
| --44NNdtngXMzsxyN7ju6Q |            2 |           5.0 |                                     9 |      0 |      0 |      0 |              0 |               0 |                  0 |               0 |               0 |               1 |                0 |               0 |                0 |                 0 |                 0 |    0 |
| --4q8EyqThydQm-eKZpS-A |          400 |          3.42 |                                    14 |    405 |    313 |     72 |              5 |               0 |                  0 |               2 |               0 |              13 |               19 |              26 |               26 |                 7 |                 0 |   23 |
| --4rAAfZnEIAKJE80aIiYg |           25 |          2.46 |                                     9 |     12 |      5 |      1 |              0 |               0 |                  0 |               0 |               0 |               3 |                1 |               0 |                0 |                 0 |                 0 |    0 |
+------------------------+--------------+---------------+---------------------------------------+--------+--------+--------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT
  u.id, 
  u.review_count, 
  u.average_stars, 
  DATE('now')- DATE(yelping_since) as 'Total years yelping(till present day)', 
  u.useful, 
  u.funny, 
  u.cool, 
  u.compliment_hot, 
  u.compliment_more, 
  u.compliment_profile, 
  u.compliment_cute, 
  u.compliment_list, 
  u.compliment_note, 
  u.compliment_plain, 
  u.compliment_cool, 
  u.compliment_funny, 
  u.compliment_writer, 
  u.compliment_photos, 
  u.fans 
FROM 
  user u
